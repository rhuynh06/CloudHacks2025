Python → C++
storage: stack, heap, static area
no colon at end of if/for/def/etc
semicolon at end of statement
curly brackets for multiple statements
may use low level for loops
duck typing replaced with explicit class hierarchy
C++
programs written as text in a file
each file is a sequence of declarations and definitions
a program has 1 start function (named “main”)
I/O operators
Inserter: <<
send things to left of arrow
bounded to terminal but can be redirected
works with cout
Extractor: >>
stores input into variable to the right of arrow
works with cin
C++ Challenges
Less dynamic (flexible), more static (fixed)
Types MUST BE declared
has static typing, not dynamic typing
What happens when I pass parameters to a function?
2 parameter passing modes: value vs reference
value: pass by copy value
2 concepts of assignment: shallow vs deep
Does a variable have storage or not? Where is the storage? Who owns the storage? Who cleans up?
3 areas of memory: stack, heap, static (global)
Syntax is more involved
Free-format, but semicolons are required at end of many statements
Week 1: Basics
Arrays don’t allow negative indexing (use vectors instead)
L[-1] returns memory before array (???)
Know pret and post operators (++i vs i++)
++i: returns new value
int x { 5 }; int y { ++x }; // x is incremented to 6, x is evaluated to the value 6, and 6 is assigned to y
std::cout << x << ' ' << y << '\n';
6 6
i++: copies i, increments, returns copy
int x { 5 }; int y { x++ }; // x is incremented to 6, copy of original x is evaluated to the value 5, and 5 is assigned to y std::cout << x << ' ' << y << '\n';
6 5
Expression (returns value) vs Statement (does something and requires ‘;’)
Variable Life Cycle
born, lives, dies
birth: allocation, construction
death: destruction, deallocation (not deconstruction)
Three areas of memory (for allocation/deallocation)
Static Storage/Data Segment: global or static variables
Stack: parameters and local function variables
Free Store/Heap: new/delete managed variables

Segmentation Fault (segfault): fatal error
Primitive types default to undefined, other types like string default to empty string
((cout << 10) << endl;
10 is sent to cout, endl (new line & flushes buffer) is sent to cout afterwards
<< is a binary operator
it is a left associative
0, ‘0’, ‘\0’, nullptr are False, everything else is True
semicolon does nothing, equivalent to ‘pass’ in python
formal parameter = parameter (placeholder), actual parameter = argument (actual)
function must be declared before (above) being called
undeclared error: not declared before being called
undefined error: declared but not defined
header files/module in .hpp/.h files → they are then #include in .cpp files
Compilation (PCLL: please come let’s launch)
preprocessor
handles #include, #define, #ifdef
compiler
makes one pass over src file
function (variable, class, etc)
must be “declared” before it is “called”
else error “undeclared function”
translates functions to relocate binary machine language module
linker
called functions be “defined” before “program linking”
else error “undefined function”
loader
binary executable program file is loaded in RAM and main() is called
C String: const char * OR std::string
for (auto c : s) → for every c in s
Symbolic Constants: named constant (constexpr double PI = 3.14, will use PI not 3.14)
constexpr instead of const because
const protects variable from being modified
constexpr makes variable known
constexpr needs to be initalized when declared

Week 2: Arrays
default array value if not set is 0
array is passed by reference (no need for &)
when array passed into function it becomes a pointer → won’t be able to use for (auto s : P), can only do so if P was declared locally
char is an integer ASCII code stored in 1 byte
‘A’: 65, ‘Z’: 90, null: 0
int index = upper_case_letter - ‘A’; // ‘A’ is now 0, etc.
char is convertible to/from int
int i = c;
char c = static_cast<char>(i); // returns char value of i
must initalize elements of array if we want them to be zero
int counts[26] = {0}
c-style strings: an array of char (char var[] {...})
char s[12] = “Hello World”;
physical size (includes ‘\0’): 12
logical length (stops before ‘\0’): 11
char s[] = “Hello World”;
physical size: 12
logical length: 11
char s3[12];
physical size: 12
logical length: unknown
char *s4 = “Hello World”;
physical size: size of pointer
logical length: 11 (size of string it’s pointing to)
pointer to string literal (cannot modify, it’s a const)
char * s5;
segfault / unknown
Week 3: Classes
Member Function (has invibisble parameter ‘this’, similar to self):
Normal: type functionName(parameters) {}
Complex add( Complex c ) {...}
may access private and public class members
Constructor: className(parameters) : init list {}
Complex(float newRe = 0.0, float newlm = 0.0) : re(newRe), im(newlm) {}
control over building/initializing object at birth
Destructor: ~className() {}
~Complex() {}
control over cleaning up and recycling object at death
copy constructor: control over how obj are copied
copy assign operator [=()]: control over how obj are assigned
only methods can access private parts (of class obj)
printing: must be able to see taht an obj is constructed correctly
when creating class, should write constructors first then print method
Defining inserter: operator <<
operator << can not be a member function (not a method, NO THIS)
ostream &operator << (ostream &out, const Complex &c)
{ c.print(out); return out; }
int main()
{ Complex mySink(3.4, 2.2); cout << “Sink at location: ” << mySink << endl; }
print() must declare “this” to be const also
Reference Parameters
purposes: modification and/or efficiency
&: pass by reference, w/o is pass by value (copy & expensive)
const&: efficiency + no modification
Sets
#include <set>
set<type> name
set<char> S;
for ( char c = ‘A’; c <= ‘Z’; ++c ) s.insert(c);
no duplicates (like python) unless using multiset
var.find(x): returns iterator/pointer to memory of x if found else end
Maps
#include <map>
map<2 params (key, value)> name
map<string, int> A;
A[“Bill”] = 33;
A[“AI”] = 27;
for ( auto E: A ) cout << E.first << “is” << E.second << “ ”;
E is a pair<string, int>, would print “A is 33 B is 27 ” (alphabetical order, not random)
Processing words in a file

if input.txt doesn’t exist, in will close right away (NOTHING HAPPENS)
Public or Private
public: class interface
private: class implementation
simple rule
make data members private
make most member functions + constructors + destructors public
often helper member functions will be private
Declaring a class
classes are declared in .hpp files

Defining Member Functions
member functions are defined in .cpp files
scope qualifier “::”, namespace doesn’t matter (requires class::member func)

Structs are default public, Class are default private
Quiz
pass by reference
purposes: modification and/or efficiency
&: efficiency
const&: efficiency + no modification


Week ¾: Strings
logical size should be at least 1 less than physical size (for null terminator)
Implicit vs Explicit casting
Implicit: conversion w/o programmer intervention
ex: int to double
int intValue = 10; double doubleValue = intValue;
Explicit: conversion w/ programmer intervention
ex: double to int
double doubleValue = 10.5; int intValue = (int)doubleValue;
explicit prevents implicit conversion (requires manual)
Constructor (only right operand exists) vs Assignment (both operands, left and right already exist)
if “static” member function, it won’t have a this → will just be function
c-string: char *s vs string literal: const str *s
c-string: mutable
string literal: read-only
Copy constructors: called when an already initialized object is assigned a new value from another existing object
ex: String(const String &s);